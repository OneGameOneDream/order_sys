package com.lyj.util;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

/**
 * 数据库链接工具
 *
 * @author liuyujie
 */
public class DBUtil {
    public static void main(String[] args) {
        Connection conn = getConnection();
        System.out.println(conn);
    }

    private DBUtil dbUtil = null;

    private DBUtil() {

    }

    public DBUtil getInstance() {
        if (dbUtil == null) {
            dbUtil = new DBUtil();
        }
        return dbUtil;
    }

    //Properties文件
    public static Properties prop = new Properties();

    //读取Properties文件
    static {
        try {
            prop.load(DBUtil.class.getClassLoader().
                    getResourceAsStream("datasource.properties"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static Connection getConnection() {
        Connection conn = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection(prop.getProperty("url"),
                    prop.getProperty("user_name"),
                    prop.getProperty("user_password"));
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return conn;
    }

    public static Statement getStatement(Connection conn) {
        Statement sate = null;
        try {
            sate = conn.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return sate;
    }

    public static PreparedStatement getPreparedStatement(Connection conn, String sql) {
        PreparedStatement prep = null;
        try {
            prep = conn.prepareStatement(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return prep;
    }

    public static PreparedStatement getPreparedStatement(Connection conn, String sql, boolean autoGeneratedKeys) {
        PreparedStatement prep = null;
        try {
            if (autoGeneratedKeys) {
                prep = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return prep;
    }

    public static ResultSet executeQuery(Statement stat, String sql) {
        ResultSet rSet = null;
        try {
            rSet = stat.executeQuery(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rSet;
    }

    public static ResultSet executeQuery(PreparedStatement prep) {
        ResultSet rSet = null;
        try {
            rSet = prep.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rSet;

    }

    public static int executeUpdate(Statement stat, String sql) {
        int affect = 0;
        try {
            affect = stat.executeUpdate(sql);
            System.out.println("���³ɹ�");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return affect;
    }

    public static int executeUpdate(PreparedStatement prep) {
        int affect = 0;
        try {
            affect = prep.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return affect;
    }

    public static void setObject(PreparedStatement prep, int index, Object object) {
        try {
            prep.setObject(index, object);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void closeStatement(Statement state) {
        try {
            if (state != null) {
                state.close();
                state = null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void closeResultSet(ResultSet rs) {
        try {
            if (rs != null) {
                rs.close();
                rs = null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void closeConnection(Connection conn) {
        try {
            if (conn != null) {
                conn.close();
                conn = null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void closeUpdate(Statement state, Connection conn) {
        closeStatement(state);
        closeConnection(conn);
    }

    public static void closeUpdate(PreparedStatement prep, Connection conn) {
        closePerp(prep);
        closeConnection(conn);
    }

    public static void closeQuery(ResultSet rs, Statement state, Connection conn) {
        closeResultSet(rs);
        closeUpdate(state, conn);
    }

    public static void closeQuery(ResultSet rs, PreparedStatement prep, Connection conn) {
        closeResultSet(rs);
        closeUpdate(prep, conn);
    }

    public static void closePerp(PreparedStatement prep) {
        try {
            if (prep != null) {
                prep.close();
                prep = null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}







